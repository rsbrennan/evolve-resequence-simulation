// selection

initialize() {
    initializeMutationRate(0);

    // neutral mutations
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeGenomicElementType("g1", m1, 1.0);
    m1.convertToSubstitution = F;

    // mutations representing alleles in QTLs
    initializeMutationType("m2", 0.5, "f", 0.0);
    m2.convertToSubstitution = F;

    // a mutation type used to evaluate phenotypic fitness
    initializeMutationType("m3", 0.5, "f", 0.0);
    m3.convertToSubstitution = F;

    // set up the chromosome
    initializeGenomicElement(g1, 0, LCh-1);

    // set recombination rate; change this if several chromosomes are simulated
    initializeRecombinationRate(RecRate, LCh-1);

    // initial sexes, with autosome
    initializeSex("A"); 

}


10000 late() {
    // read to burnin
    sim.readFromPopulationFile(BurninPath + "SimRep" + SimRepID + "/" + BurninFilename);

    // reduce pop size to 50 indivs
    p1.setSubpopulationSize(ParentSize);
    
    // give an m3 mutation to every individual, for phenotypic fitness
    sim.subpopulations.genomes.addNewMutation(m3, 0.0, 0);


    // add in frequency constraints
    if (LowFreq == T)
        FreqencyConstrainedMutations=unique(sim.subpopulations.genomes.mutationsOfType(m1))[
        which(sim.mutationFrequencies(p1, unique(sim.subpopulations.genomes.mutationsOfType(m1))) <= FreqBound | 
        sim.mutationFrequencies(p1, unique(sim.subpopulations.genomes.mutationsOfType(m1))) >= (1-FreqBound))];
    else 
        FreqencyConstrainedMutations=unique(sim.subpopulations.genomes.mutationsOfType(m1))[
        which(sim.mutationFrequencies(p1, unique(sim.subpopulations.genomes.mutationsOfType(m1))) >= FreqBound & 
        sim.mutationFrequencies(p1, unique(sim.subpopulations.genomes.mutationsOfType(m1))) <= (1-FreqBound))];

    // get all SNPs within one region of a chromosome
    ClusteredMutations=unique(FreqencyConstrainedMutations)
        [which(FreqencyConstrainedMutations.position >= LowerPosBound & 
        FreqencyConstrainedMutations.position <= UpperPosBound)];

    // set seed so that QTLs remain the same within one simulation replication
    setSeed(SimRepID); 
    
    // set seed so that QTLs remain the same within one simulation replication
    setSeed(SimRepID); 


    // sample QTLs at random
    QTL=sample(ClusteredMutations,NQTL);
    QTL.setMutationType(m2);

    // assign positive effect sizes to all QTLs
        for (IndividualQTL in QTL)
        {
        IndividualQTL.setSelectionCoeff(0.0);
        }

    // assign negative effect sizes to half of the QTLs
       // Negative = sample(0:(NQTL-1), asInteger(NQTL/2));
        // print(Negative) ;
        //NegativeQTL = QTL[Negative];
        
        //for (IndividualQTL in NegativeQTL)
        //{
        //IndividualQTL.setSelectionCoeff(-(IndividualQTL.selectionCoeff));
        //}

    // print original phenotypes
    inds1 = sim.subpopulations.individuals;
    phenotypes_10000 = inds1.sumOfMutationsOfType(m2);
    p_10k_out = paste(phenotypes_10000, sep="\n");
    writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/phenotypes_gen_10000.txt"), p_10k_out,F);

    print(paste("10000 pop size ", size(sim.subpopulations.individuals)));
}

10001 late() {

    // save phenotypes
        inds2 = sim.subpopulations.individuals;
        phenotypes_10001 = inds2.sumOfMutationsOfType(m2);
        p_101k_out = paste(phenotypes_10001, sep="\n");
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/phenotypes_gen_10001.txt"), p_101k_out,F);

    print(paste("10001 pop size ", size(sim.subpopulations.individuals)));
    
    // increase populaiton size:
        p1.setSubpopulationSize(OffspringSize);
}

10002: fitness(m2) {
    return 1.0;
    }

10002 late() {
 print(paste("10002 pop size = ", size(sim.subpopulations.individuals)));
 
    // assign positive effect sizes to all QTLs
    QTL = sim.mutationsOfType(m2);
    for (IndividualQTL in QTL)
        {
            IndividualQTL.setSelectionCoeff(1.0);
        }
    // assign negative effect sizes to half of the QTLs
        Negative = sample(0:(NQTL-1), asInteger(NQTL/2));
        NegativeQTL = QTL[Negative];

        for (IndividualQTL in NegativeQTL)
        {
        IndividualQTL.setSelectionCoeff(-(IndividualQTL.selectionCoeff));
        }


 // save phenotypes of each individual and write to file
    GenID = sim.generation-9999;
    inds = sim.subpopulations.individuals;
    phenotypes = inds.sumOfMutationsOfType(m2);
    Traits = paste(phenotypes, sep="\n");
    writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/phenotypes_all_10002.txt"),            Traits,F);
    // return number of QTLs
        NSegregatingQTL = paste(size(unique(sim.subpopulations.individuals.genomes.mutationsOfType(m2))));
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/NSegregatingQTL.txt"),               NSegregatingQTL, F);
    
    // assign all individuals to 1 of 8 groups
        sim.subpopulations.individuals.tag=rep(1:8, asInteger(OffspringSize/8));
    
        // randomize this assignment. This probably isn't necessary- I think the indivs are likely already random.
        sim.subpopulations.individuals.tag=sample(sim.subpopulations.individuals.tag, OffspringSize);

    // need to split the individuals out into their groups, assign phenotypes, then select only the exp groups  

        ctr1_index=which(sim.subpopulations.individuals.tag==1);
        ctr2_index=which(sim.subpopulations.individuals.tag==2);
        ctr3_index=which(sim.subpopulations.individuals.tag==3);
        ctr4_index=which(sim.subpopulations.individuals.tag==4);

    // selection:
    
        cutoff=Cutoff_Quantile;
        
        sln1_index=which(sim.subpopulations.individuals.tag==5);
        sln1_quantile=quantile(phenotypes[sln1_index], cutoff);
        sln1_keep=which(sim.subpopulations.individuals.tag==5 & phenotypes > sln1_quantile);        

        sln2_index=which(sim.subpopulations.individuals.tag==6);
        sln2_quantile=quantile(phenotypes[sln2_index], cutoff);
        sln2_keep=which(sim.subpopulations.individuals.tag==6 & phenotypes > sln2_quantile);    
        
        sln3_index=which(sim.subpopulations.individuals.tag==7);
        sln3_quantile=quantile(phenotypes[sln3_index], cutoff);
        sln3_keep=which(sim.subpopulations.individuals.tag==7 & phenotypes > sln3_quantile);        

        sln4_index=which(sim.subpopulations.individuals.tag==8);
        sln4_quantile=quantile(phenotypes[sln4_index], cutoff);
        sln4_keep=which(sim.subpopulations.individuals.tag==8 & phenotypes > sln4_quantile);    
    
    // save selection quantiles
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln1_quantile.txt"), paste(sln1_quantile), F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln2_quantile.txt"), paste(sln2_quantile), F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln3_quantile.txt"), paste(sln3_quantile), F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln4_quantile.txt"), paste(sln4_quantile), F);        
    
    
    // write out the genomes for each 
        AllIndividuals = sim.subpopulations.individuals;
        // print(AllIndividuals[ctr1_index]);
        ctr1_indivs=AllIndividuals[ctr1_index];
        ctr2_indivs=AllIndividuals[ctr2_index];
        ctr3_indivs=AllIndividuals[ctr3_index];
        ctr4_indivs=AllIndividuals[ctr4_index];
                
        sln1_indivs=AllIndividuals[sln1_keep];
        sln2_indivs=AllIndividuals[sln2_keep];
        sln3_indivs=AllIndividuals[sln3_keep];
        sln4_indivs=AllIndividuals[sln4_keep];
        
        ctr1_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr_1_genomes.txt");
        ctr2_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr_2_genomes.txt");
        ctr3_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr_3_genomes.txt");
        ctr4_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr_4_genomes.txt");

        sln1_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln_1_genomes.txt");
        sln2_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln_2_genomes.txt");
        sln3_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln_3_genomes.txt");
        sln4_indivs.genomes.output(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln_4_genomes.txt");
                
    // save phenotypes
        ctr1_Traits = paste(phenotypes[ctr1_index], sep="\n");
        ctr2_Traits = paste(phenotypes[ctr2_index], sep="\n");
        ctr3_Traits = paste(phenotypes[ctr3_index], sep="\n");
        ctr4_Traits = paste(phenotypes[ctr4_index], sep="\n");

        sln1_Traits = paste(phenotypes[sln1_keep], sep="\n");
        sln2_Traits = paste(phenotypes[sln2_keep], sep="\n");
        sln3_Traits = paste(phenotypes[sln3_keep], sep="\n");
        sln4_Traits = paste(phenotypes[sln4_keep], sep="\n");
        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr1_trait.txt"), ctr1_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr2_trait.txt"), ctr2_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr3_trait.txt"), ctr3_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/ctr4_trait.txt"), ctr4_Traits, F);        

        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln1_trait.txt"), sln1_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln2_trait.txt"), sln2_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln3_trait.txt"), sln3_Traits, F);        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln4_trait.txt"), sln4_Traits, F);    
 
    // save pre-selected phenotypes
        sln1_pre = paste(phenotypes[sln1_index], sep="\n");
        sln2_pre = paste(phenotypes[sln2_index], sep="\n");
        sln3_pre = paste(phenotypes[sln3_index], sep="\n");
        sln4_pre = paste(phenotypes[sln4_index], sep="\n");
        
        
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln1_trait_preselection.txt"), sln1_pre, F);
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln2_trait_preselection.txt"), sln2_pre, F);
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln3_trait_preselection.txt"), sln2_pre, F);
        writeFile(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/sln4_trait_preselection.txt"), sln2_pre, F);
         
 
    // output full population
    AllIndividuals.genomes.output(paste(OutPath + "SimRep" + SimRepID + "/" + Quantile_label + "/all_indiv_genomes.txt"));
    //AllIndividuals.genomes.outputVCF("Full.vcf");

}
